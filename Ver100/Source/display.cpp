//----------------------------------------------------------------------------

//Модуль поддержки LED-дисплея

//----------------------- Используемые ресурсы: ------------------------------

//Используется дисплей из 7-сегментных LED-индикаторов.
//Индикация - статическая.
//Дополнительно используются светодиоды.
//Индикаторы и светодиоды подключены через внешний сдвиговый
//регистр, доступ к которому осуществляется через класс TSreg.

//----------------------------------------------------------------------------

#include "main.hpp"
#include "display.hpp"

//----------------------------------------------------------------------------
//---------------------------- Класс TDisplay --------------------------------
//----------------------------------------------------------------------------

//----------------------------- Конструктор: ---------------------------------

TDisplay::TDisplay(void)
{
  Sreg.Init();
  Clear();
  Update();
  Sreg.Enable(1);
}

//----------------------------------------------------------------------------
//------------------------- Интерфейсные методы: -----------------------------
//----------------------------------------------------------------------------

//--------------------------- Очистка дисплея: -------------------------------

void TDisplay::Clear(void)
{
  for(uint8_t i = 0; i < REGS; i++)
    RegData[i] = 0xFF;
  Scale(0);
}

//-------------------------- Обновление дисплея: -----------------------------

void TDisplay::Update(void)
{
  Sreg.Load(RegData);
}

//---------------- Включение сегмента для заданного канала: ------------------

/*
void TDisplay::Seg(uint8_t s, uint8_t ch)
{
  Regs_t Reg = Segs[s][ch].r;
  Outs_t Out = Segs[s][ch].q;
  RegData[Reg] &= ~(1 << Out);
}
*/

//-------------------- Включение сегмента для канала L: ----------------------

void TDisplay::SegL(uint8_t s, bool on)
{
  Regs_t Reg = SegsL[s].r;
  Outs_t Out = SegsL[s].q;
  if(on)
    RegData[Reg] &= ~(1 << Out);
      else RegData[Reg] |= (1 << Out);
}

//-------------------- Включение сегмента для канала R: ----------------------

void TDisplay::SegR(uint8_t s, bool on)
{
  Regs_t Reg = SegsR[s].r;
  Outs_t Out = SegsR[s].q;
  if(on)
    RegData[Reg] &= ~(1 << Out);
      else RegData[Reg] |= (1 << Out);
}

//---------------- Включение столбика для заданного канал: -------------------

/*
void TDisplay::Bar(uint8_t n, uint8_t ch)
{
  for(uint8_t i = 0; i < n; i++) Seg(i, ch);
}
*/

//-------------------- Включение столбика для канала L: ----------------------

void TDisplay::BarL(uint8_t n)
{
  for(uint8_t i = 0; i < SEGS; i++) SegL(i, i <= n);
}

//-------------------- Включение столбика для канала R: ----------------------

void TDisplay::BarR(uint8_t n)
{
  for(int i = 0; i < SEGS; i++) SegR(i, i <= n);
}

//------------------------ Включение транспаранта: ---------------------------

void TDisplay::Led(uint8_t n)
{
  Regs_t Reg = Transp[n].r;
  Outs_t Out = Transp[n].q;
  RegData[Reg] &= ~(1 << Out);
}

//-------------------- Включение набора транспарантов: -----------------------

void TDisplay::Leds(uint16_t s)
{
  for(uint8_t i = 0; i < TRS; i++)
  {
    Regs_t Reg = Transp[i].r;
    Outs_t Out = Transp[i].q;
    if(s & 1)
      RegData[Reg] &= ~(1 << Out);
        else RegData[Reg] |= (1 << Out);
    s = s >> 1;
  }
}

//-------------------- Включение/выключение подсветки: -----------------------

void TDisplay::Scale(bool on)
{
  Regs_t Reg = Back.r;
  Outs_t Out = Back.q;
  if(on) RegData[Reg] |= (1 << Out);
    else RegData[Reg] &= ~(1 << Out);
}

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
